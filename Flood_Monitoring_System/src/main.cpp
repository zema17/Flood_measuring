#include <Arduino.h>
#include <ESP8266WiFi.h>
#include <ESP8266HTTPClient.h>
#include <ArduinoJson.h>

// ========== C·∫§U H√åNH WIFI ========== //
const char* ssid = "vinhphu";
const char* password = "01012002";

// ========== C·∫§U H√åNH SERVER ========== //
const char* serverUrl = "http://localhost/flood.php";  // Thay b·∫±ng URL API c·ªßa b·∫°n
const int serverInterval = 5000;  // G·ª≠i d·ªØ li·ªáu m·ªói 5 gi√¢y

// ========== C·∫§U H√åNH TELEGRAM ========== //
const char* telegramToken = "123456789:ABCdefGHIJKlmNoPQRsTuVWXYz"; //khong public dc heheee
const char* chatId = "123456789";
const float FLOOD_THRESHOLD = 50.0;  // Ng∆∞·ª°ng c·∫£nh b√°o l≈© (cm)

// ========== BI·∫æN TO√ÄN C·ª§C ========== //
float lastWaterLevel = 0.0;
bool isFloodAlertSent = false;

// ========== H√ÄM G·ª¨I C·∫¢NH B√ÅO TELEGRAM ========== //
void sendTelegramAlert(float waterLevel) {
  String message = "‚ö†Ô∏è **C·∫¢NH B√ÅO L≈®!** ‚ö†Ô∏è\n";
  message += "üìç **M·ª±c n∆∞·ªõc hi·ªán t·∫°i:** " + String(waterLevel) + " cm\n";
  message += "‚ùå **V∆∞·ª£t ng∆∞·ª°ng an to√†n** (" + String(FLOOD_THRESHOLD) + " cm)!";

  HTTPClient http;
  String url = "https://api.telegram.org/bot" + String(telegramToken) + 
               "/sendMessage?chat_id=" + String(chatId) + 
               "&text=" + URLEncode(message) + 
               "&parse_mode=Markdown";
  
  http.begin(url);
  int httpCode = http.GET();
  
  if (httpCode == HTTP_CODE_OK) {
    Serial.println("[Telegram] C·∫£nh b√°o ƒë√£ g·ª≠i!");
    isFloodAlertSent = true;
  } else {
    Serial.printf("[Telegram] L·ªói: %s\n", http.errorToString(httpCode).c_str());
  }
  http.end();
}

// ========== H√ÄM G·ª¨I D·ªÆ LI·ªÜU L√äN SERVER ========== //
void sendToServer(float waterLevel) {
  HTTPClient http;
  http.begin(serverUrl);
  http.addHeader("Content-Type", "application/json");

  String jsonData = "{\"water_level\":" + String(waterLevel) + "}";
  int httpCode = http.POST(jsonData);

  if (httpCode == HTTP_CODE_OK) {
    Serial.println("[Server] D·ªØ li·ªáu ƒë√£ g·ª≠i th√†nh c√¥ng!");
  } else {
    Serial.printf("[Server] L·ªói: %s\n", http.errorToString(httpCode).c_str());
  }
  http.end();
}

// ========== SETUP ========== //
void setup() {
  Serial.begin(115200);  // UART v·ªõi STM32
  WiFi.begin(ssid, password);

  Serial.println("\nƒêang k·∫øt n·ªëi WiFi...");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  
  Serial.println("\nWiFi ƒë√£ k·∫øt n·ªëi!");
  Serial.print("IP: ");
  Serial.println(WiFi.localIP());
}

// ========== LOOP ========== //
void loop() {
  if (Serial.available()) {
    String jsonData = Serial.readStringUntil('\n');
    StaticJsonDocument<200> doc;
    deserializeJson(doc, jsonData);
    lastWaterLevel = doc["water_level"];

    // G·ª≠i d·ªØ li·ªáu l√™n server
    sendToServer(lastWaterLevel);

    // Ki·ªÉm tra ng∆∞·ª°ng l≈© v√† g·ª≠i c·∫£nh b√°o
    if (lastWaterLevel > FLOOD_THRESHOLD && !isFloodAlertSent) {
      sendTelegramAlert(lastWaterLevel);
    } else if (lastWaterLevel <= FLOOD_THRESHOLD) {
      isFloodAlertSent = false;  // Reset c·∫£nh b√°o n·∫øu m·ª±c n∆∞·ªõc gi·∫£m
    }
  }

  delay(100);  // Gi·∫£m CPU usage
}